(require '[clj-http.client :as client])
(list-methods)
(get-ticket-actions)
reload
(get-ticket-actions)
(get-ticket-actions 60998)
(get-ticket-actions 60913)
(get-ticket 60913)
(reload)
(get-ticket 60913)
(get-method-help "system.getAPIVersion")
(get-ticket 60913)
(get-ticket example-ticket)
((get-ticket example-ticket) :attributes)
(((get-ticket example-ticket) :attributes) "keywords")
(reload)
(use 'tracula.core)
(((get-ticket example-ticket) :attributes) "keywords")
reload
(requre 'tracula.core)
(require 'tracula.core)
(require '[tracula.core])
(((get-ticket example-ticket) :attributes) "keywords")
(load '[tracula.core])
(load '[tracula.core] :reload)
(require '[tracula.core] :reload)
(((get-ticket example-ticket) :attributes) "keywords")
(((get-ticket example-ticket) :attributes) "component")
(((get-ticket example-ticket) :attributes) "milestone")
(((get-ticket example-ticket) :attributes) "milestonex")
(((get-ticket example-ticket) :attributes) "type")
(((get-ticket example-ticket) :attributes) "_ts")
(def example-ticket 60989)
(((get-ticket example-ticket) :attributes) "_ts")
((get-ticket example-ticket) :attributes)
(date-time 1986 10 14 4 3 27 456)
(use 'clj-time.core)
(date-time 1986 10 14 4 3 27 456)
(str (date-time 1986 10 14 4 3 27 456))
(get-ticket example-ticket)
(str (date-time (now)))
(str (now))
(require '[tracula.core] :reload)
(str (now))
dt-format
(dt-format)
(require '[tracula.core] :reload)
(dt-format)
dt-format
(def custom-formatter (formatter dt-format))
(def custom-formatter (clj-time/formatter dt-format))
(def custom-formatter (clj-time.core/formatter dt-format))
cltime
(require '[tracula.core] :reload)
cltime
(def custom-formatter (cltime/formatter dt-format))
(now)
(cltime/now)
(str (cltime/now))
(def custom-formatter (tformat/formatter dt-format))
(require '[tracula.core] :reload)
(def custom-formatter (tformat/formatter dt-format))
(require '[tracula.core] :reload)
(def custom-formatter (tformat/formatter date-format))
(tformat/show-formatters)
(tformat/formatters :date-hour-minute-second)
(parse (tformat/formatters :date-hour-minute-second) now)
(tformat/parse (tformat/formatters :date-hour-minute-second) (now))
(tformat/parse (tformat/formatters :date-hour-minute-second) (cltime/now))
(tformat/formatters :date-hour-minute-second) (cltime/now)
(def foomat (tformat/formatters :date-hour-minute-second))
(foomat (cltime/now))
(unparse foomat (cltime/now))
(cltime/unparse foomat (cltime/now))
(tformat/unparse foomat (cltime/now))
get-current-timestamp-str
(require '[tracula.core] :reload)
get-current-timestamp-str
(get-current-timestamp-str)
(get-ticket-actions example-ticket)
(get-ticket example-ticket)
(get-ticket-actions example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(create-ticket "test summary" "test description" {})
(require '[tracula.core] :reload)
(create-ticket "test summary" "test description" {})
(require '[tracula.core] :reload)
(create-ticket "test summary" "test description" {})
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(query-tickets "")
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(get-ticket 6896)
(get-ticket-actions 62529)
(empty? [])
(seq [])
(use '[cssgen])
(def width (px 960))
 (rule "ul.nav, ol"
      :color :black
      :background-color :#ddd
      :padding [:1px "2px" (px 3) 0])
(def width (px 960))
(require '[cssgen])
(def width (cssgen/px 960))
(require '[cssgen :as cssgen])
(def width (cssgen/px 960))
(rule "ul#nav, ol"
    :color :black
    :background-color :#ddd
    :padding [:1px "2px" (px 3) 0])
(rule "ul#nav, ol" :color :black :background-color :#ddd :padding [:1px "2px" (px 3) 0])
(rule "ul#nav, ol" :color :black :background-color :#ddd :padding [:1px "2px" (cssgen/px 3) 0])
(require '[clj-style.core :as cs])
cs
(cs)
(cs/defrule)
(cs/defrule  div-foo
  [:div#foo
   :margin "0px"
   [:span.bar
    :color "black"
    :font-weight "bold"
    [:a:hover
     :text-decoration "none"]]])
div-foo
(cs/render div-foo)
(println (cs/render div-foo))
(require '[tracula.core] :reload)
(tracula.core/-main)
(require '[tracula.core] :reload)
(tracula.core/server)
tracula.core/server
(tracula.core/server restart)
(tracula.core/server -restart)
(tracula.core/server stop)
(tracula.core/server doStop)
(.stop tracula.core/server)
(.start tracula.core/server)
(require '[tracula.core] :reload)
(.stop tracula.core/server)
(.start tracula.core/server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(stop-server)
(start-server)
git diff
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(start-server)
(require '[tracula.core] :reload)
(start-server)
(.start tracula.core/server)
(tracula.core/-main)
(require '[tracula.core] :reload)
(start-server)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(stop-server)
(start-server)
(stop-server)
{}
(type {})
(require '[tracula.core] :reload)
(get-ticket 69008)
(get-ticket 6908)
(keys (get-ticket 6908))
(run-all-tests)
(require '[tracula.core.test] :reload)
(require '[tracula.test.core] :reload)
(run-all-tests)
(clojure.test/run-all-tests)
(clojure.test/run-tests)
(clojure.test/run-tests 'tracula.test.core)
(keys (get-ticket 6908))
(clojure.test/run-tests 'tracula.test.core)
(get-current-timestamp-str)
(require '[tracula.core] :reload)
(clojure.test/run-tests 'tracula.test.core)
(list-methods)
(create-ticket "test-summary" "test-description")
(defrecord Person [name id])
(get-method-help "ticket.delete")
(delete-ticket 64157)
(get-ticket-actions 64157)
(create-ticket "foo" "bar")
(get-ticket-actions 64161)
