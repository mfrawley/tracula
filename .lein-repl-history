(require '[clj-http.client :as client])
(list-methods)
(get-ticket-actions)
reload
(get-ticket-actions)
(get-ticket-actions 60998)
(get-ticket-actions 60913)
(get-ticket 60913)
(reload)
(get-ticket 60913)
(get-method-help "system.getAPIVersion")
(get-ticket 60913)
(get-ticket example-ticket)
((get-ticket example-ticket) :attributes)
(((get-ticket example-ticket) :attributes) "keywords")
(reload)
(use 'tracula.core)
(((get-ticket example-ticket) :attributes) "keywords")
reload
(requre 'tracula.core)
(require 'tracula.core)
(require '[tracula.core])
(((get-ticket example-ticket) :attributes) "keywords")
(load '[tracula.core])
(load '[tracula.core] :reload)
(require '[tracula.core] :reload)
(((get-ticket example-ticket) :attributes) "keywords")
(((get-ticket example-ticket) :attributes) "component")
(((get-ticket example-ticket) :attributes) "milestone")
(((get-ticket example-ticket) :attributes) "milestonex")
(((get-ticket example-ticket) :attributes) "type")
(((get-ticket example-ticket) :attributes) "_ts")
(def example-ticket 60989)
(((get-ticket example-ticket) :attributes) "_ts")
((get-ticket example-ticket) :attributes)
(date-time 1986 10 14 4 3 27 456)
(use 'clj-time.core)
(date-time 1986 10 14 4 3 27 456)
(str (date-time 1986 10 14 4 3 27 456))
(get-ticket example-ticket)
(str (date-time (now)))
(str (now))
(require '[tracula.core] :reload)
(str (now))
dt-format
(dt-format)
(require '[tracula.core] :reload)
(dt-format)
dt-format
(def custom-formatter (formatter dt-format))
(def custom-formatter (clj-time/formatter dt-format))
(def custom-formatter (clj-time.core/formatter dt-format))
cltime
(require '[tracula.core] :reload)
cltime
(def custom-formatter (cltime/formatter dt-format))
(now)
(cltime/now)
(str (cltime/now))
(def custom-formatter (tformat/formatter dt-format))
(require '[tracula.core] :reload)
(def custom-formatter (tformat/formatter dt-format))
(require '[tracula.core] :reload)
(def custom-formatter (tformat/formatter date-format))
(tformat/show-formatters)
(tformat/formatters :date-hour-minute-second)
(parse (tformat/formatters :date-hour-minute-second) now)
(tformat/parse (tformat/formatters :date-hour-minute-second) (now))
(tformat/parse (tformat/formatters :date-hour-minute-second) (cltime/now))
(tformat/formatters :date-hour-minute-second) (cltime/now)
(def foomat (tformat/formatters :date-hour-minute-second))
(foomat (cltime/now))
(unparse foomat (cltime/now))
(cltime/unparse foomat (cltime/now))
(tformat/unparse foomat (cltime/now))
get-current-timestamp-str
(require '[tracula.core] :reload)
get-current-timestamp-str
(get-current-timestamp-str)
(get-ticket-actions example-ticket)
(get-ticket example-ticket)
(get-ticket-actions example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(require '[tracula.core] :reload)
(get-ticket-changelog example-ticket)
(create-ticket "test summary" "test description" {})
(require '[tracula.core] :reload)
(create-ticket "test summary" "test description" {})
(require '[tracula.core] :reload)
(create-ticket "test summary" "test description" {})
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(get-ticket 61614)
(require '[tracula.core] :reload)
(query-tickets "")
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(require '[tracula.core] :reload)
(get-recent)
(get-ticket 6896)
(get-ticket-actions 62529)
(empty? [])
(seq [])
(use '[cssgen])
(def width (px 960))
 (rule "ul.nav, ol"
      :color :black
      :background-color :#ddd
      :padding [:1px "2px" (px 3) 0])
(def width (px 960))
(require '[cssgen])
(def width (cssgen/px 960))
(require '[cssgen :as cssgen])
(def width (cssgen/px 960))
(rule "ul#nav, ol"
    :color :black
    :background-color :#ddd
    :padding [:1px "2px" (px 3) 0])
(rule "ul#nav, ol" :color :black :background-color :#ddd :padding [:1px "2px" (px 3) 0])
(rule "ul#nav, ol" :color :black :background-color :#ddd :padding [:1px "2px" (cssgen/px 3) 0])
(require '[clj-style.core :as cs])
cs
(cs)
(cs/defrule)
(cs/defrule  div-foo
  [:div#foo
   :margin "0px"
   [:span.bar
    :color "black"
    :font-weight "bold"
    [:a:hover
     :text-decoration "none"]]])
div-foo
(cs/render div-foo)
(println (cs/render div-foo))
(require '[tracula.core] :reload)
(tracula.core/-main)
(require '[tracula.core] :reload)
(tracula.core/server)
tracula.core/server
(tracula.core/server restart)
(tracula.core/server -restart)
(tracula.core/server stop)
(tracula.core/server doStop)
(.stop tracula.core/server)
(.start tracula.core/server)
(require '[tracula.core] :reload)
(.stop tracula.core/server)
(.start tracula.core/server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(stop-server)
(start-server)
git diff
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(start-server)
(require '[tracula.core] :reload)
(start-server)
(.start tracula.core/server)
(tracula.core/-main)
(require '[tracula.core] :reload)
(start-server)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(require '[tracula.core] :reload)
(restart-server)
(stop-server)
(start-server)
(stop-server)
{}
(type {})
(require '[tracula.core] :reload)
(get-ticket 69008)
(get-ticket 6908)
(keys (get-ticket 6908))
(run-all-tests)
(require '[tracula.core.test] :reload)
(require '[tracula.test.core] :reload)
(run-all-tests)
(clojure.test/run-all-tests)
(clojure.test/run-tests)
(clojure.test/run-tests 'tracula.test.core)
(keys (get-ticket 6908))
(clojure.test/run-tests 'tracula.test.core)
(get-current-timestamp-str)
(require '[tracula.core] :reload)
(clojure.test/run-tests 'tracula.test.core)
(list-methods)
(create-ticket "test-summary" "test-description")
(defrecord Person [name id])
(get-method-help "ticket.delete")
(delete-ticket 64157)
(get-ticket-actions 64157)
(create-ticket "foo" "bar")
(get-ticket-actions 64161)
(require '[tracula.core] :reload)
(get-ticket 64169)
(require '[tracula.calls] :reload)
(get-ticket 64169)
(tracula.calls/get-ticket 64169)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.utils] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.utils] :reload)
(require '[tracula.config] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions 64169)
(tracula.calls/resolve-ticket 64169)
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169)
(tracula.calls/get-ticket 64169)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.utils] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "fixed?")
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-raw 64169 )
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-raw 64169 )
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-hash 64169 )
(tracula.calls/resolve-ticket 64169 "something" "fixed")
(require '[tracula.calls] :reload)
(tracula.calls/resolve-ticket 64169 "something" "fixed")
(tracula.calls/resolve-ticket 64169 "something" "resolve")
(require '[tracula.calls] :reload)
(tracula.calls/action-ticket 64169 "something" "reopen")
(tracula.calls/get-ticket-hash 64169 )
(:attributes (tracula.calls/get-ticket-hash 64169 ))
(require '[tracula.calls] :reload)
(get-ticket-components)
(tracula.calls/get-ticket-components)
(require '[tracula.calls] :reload)
(:attributes (tracula.calls/update-ticket-attr 64169 "test update attr" "component" "iPhone-App"))
(require '[tracula.calls] :reload)
(require '[tracula.utils] :reload)
(:attributes (tracula.calls/update-ticket-attr 64169 "test update attr" "component" "iPhone-App"))
(require '[tracula.calls] :reload)
(:attributes (tracula.calls/update-ticket-attr 64169 "test update attr" "component" "iPhone-App"))
(ticket-attributes (get-ticket-hash 64149))
(:use tracula.calls)
(:use tracula/calls)
(:use [tracula.utils])
(:use [utils])
(tracula.utils/ticket-attributes (tracula.utils/get-ticket-hash 64149))
(tracula.utils/ticket-attributes (tracula.calls/get-ticket-hash 64149))
(tracula.calls/get-ticket-hash 64149)
(tracula.calls/get-ticket-hash 64169)
(tracula.utils/ticket-attributes (tracula.calls/get-ticket-hash 64169))
(tracula.calls/update-ticket-attr 64169 "test update attr" "component" "iPhone-App")
(tracula.utils/ticket-attributes (tracula.calls/get-ticket-hash 64169))
(conj (ticket-attributes (get-ticket-hash ticketno)) {(symbol "component") (symbol "foo")})
(conj (ticket-attributes (get-ticket-hash ticketno)) {"component" "foo"})
(conj (tracula.calls/ticket-attributes (tracula.utils/get-ticket-hash ticketno)) {"component" "foo"})
(conj (tracula.utils/ticket-attributes (tracula.calls/get-ticket-hash ticketno)) {"component" "foo"})
(conj (tracula.utils/ticket-attributes (tracula.calls/get-ticket-hash 64169)) {"component" "foo"})
(:use [tracula.cals])
(:use [tracula.calls])
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-attributes 64169)
(tracula.calls/update-ticket-attr 64169 "test update attr" "component" "iPhone-App")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-attr 64169 "test update ")
(require '[tracula.calls] :reload)
(tracula.calls/update-milestone 64169 "iPhone-App")
(require '[tracula.calls] :reload)
(tracula.calls/update-milestone 64169 "iPhone-App")
(tracula.calls/update-ticket-milestone 64169 "iPhone-App")
(require '[tracula.calls] :reload)
(tracula.calls/get-priorities)
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-priority 64169 "low")
(require '[tracula.calls] :reload)
(tracula.calls/get-statuses)
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-status 64169 "doing")
(tracula.calls/update-ticket-status 64169 "done")
(tracula.calls/update-ticket-status 64169 "doing")
(tracula.calls/get-statuses)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-types)
(require '[tracula.calls] :reload)
(tracula.calls/get-severity-names)
(require '[tracula.calls] :reload)
(tracula.calls/add-ticket-comment 64169 "Something more interesting perhaps?")
(require '[tracula.calls] :reload)
(update-ticket-description 64149 "New desc")
(tracula/update-ticket-description 64149 "New desc")
(tracula.calls/update-ticket-description 64149 "New desc")
(tracula.calls/update-ticket-description 64149 "Element \"Flash\" is disappeared for this user...?\r\nWe couldn't also find \"Flash\" on their website.\r\nCould you please check this?\r\n\r\n=== Helpdesk Ticket(s) ===\r\n\r\nhttps:\/\/helpdesk.jimdo-server.com\/staff\/index.php?\/Tickets\/Ticket\/View\/1502941\/inbox\/89\/4\/-1\r\n\r\n=== Browser + Version ===\r\n\r\nFireFox 25.0.1\r\n\r\n=== Steps to reproduce the Error ===\r\n 1. log-in to website\r\n 2. open \"+ add new elements\"\r\n 3. please check if you find element \"Flash\"\r\n\r\n=== Link to Jimdo-Page ===\r\n\r\n * Website Id: 10467296 - www.glb-branding.com\r\n * direct login link: https:\/\/mgmt.jimdo-server.com\/website\/index\/jumpcms\/website\/10467296\/mode\/entwickler\r\n * URL: glb-branding.jimdo.com \r\n")
(def foo "Element \"Flash\" is disappeared for this user...?\r\nWe couldn't also find \"Flash\" on their website.\r\nCould you please check this?\r\n\r\n=== Helpdesk Ticket(s) ===\r\n\r\nhttps:\/\/helpdesk.jimdo-server.com\/staff\/index.php?\/Tickets\/Ticket\/View\/1502941\/inbox\/89\/4\/-1\r\n\r\n=== Browser + Version ===\r\n\r\nFireFox 25.0.1\r\n\r\n=== Steps to reproduce the Error ===\r\n 1. log-in to website\r\n 2. open \"+ add new elements\"\r\n 3. please check if you find element \"Flash\"\r\n\r\n=== Link to Jimdo-Page ===\r\n\r\n * Website Id: 10467296 - www.glb-branding.com\r\n * direct login link: https:\/\/mgmt.jimdo-server.com\/website\/index\/jumpcms\/website\/10467296\/mode\/entwickler\r\n * URL: glb-branding.jimdo.com \r\n")
(tracula.calls/update-ticket-description 64169 "New desc")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-summary 64169 "New title")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-keywords 64169 "ios6mustdie, androidblows")
(tracula.calls/update-ticket-keywords 64169 " androidblows")
(str {})
(str {:foo 1})
(str {:foo 1 :pp 2})
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-owner 64169 "mark")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-owner 64169 "mark")
(tracula.calls/update-ticket-owner 64169 "mark.frawley")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-owner 64169 "mark.frawley")
(require '[tracula.calls] :reload)
(tracula.calls/get-actions-raw 64169)
(tracula.calls/get-ticket-actions-raw 64169)
(tracula.calls/get-actions-raw 64169)
(tracula.calls/get-ticket-actions-raw 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions-raw 64169)
(require '[tracula.calls] :reload)
(tracula.calls/get-ticket-actions-raw 64169)
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-owner 64169 "mark")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-owner 64169 "mark")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-resolution 64169 "fixed")
(conj {:a 1} {:b 2})
(conj {:b 1} {:b 2})
(conj {"b" 1} {"b" 2})
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-resolution 64169 "fixed")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-resolution 64169 "fixed")
(tracula.calls/get-ticket-actions 64169)
(tracula.calls/update-ticket-resolution 64169 "reopen")
(require '[tracula.calls] :reload)
(tracula.calls/update-ticket-resolution 64169 "reopen")
(tracula.calls/get-ticket-actions 64169)
(tracula.calls/update-ticket-resolution 64169 "doing")
(require '[tracula.utils] :reload)
(tracula.utils/camelize "fuck_you")
(map (tracula.utils/camelize {"foo_bar": "fuck_you"}))
(map tracula.utils/camelize {"foo_bar": "fuck_you"})
(map tracula.utils/camelize {"foo_bar" : "fuck_you"})
(map tracula.utils/camelize {:"foo_bar" "fuck_you"})
(map tracula.utils/camelize {"foo_bar" "fuck_you"})
(map tracula.utils/camelize (keys {"foo_bar" "fuck_you"}))
(into {}  tracula.utils/camelize (keys {"foo_bar" "fuck_you"}))
(def mymap {"foo_bar" "fuck_you"})
(into {} 
  (for [[k v] mymap] k)) 
  (for [[k v] mymap] [k v])) 
(into {}  (for [[k v] mymap] [k v])))
(into {}  (for [[k v] mymap] [k v]))
(into {}  (for [[k v] mymap] [(tracula.utils/camelize k) v]))
(require '[tracula.utils] :reload)
(tracula.calls/get-ticket 64169)
(require '[tracula.utils] :reload)
(tracula.calls/get-ticket 64169)
(jsonify (tracula.calls/get-ticket 64169))
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(require '[tracula.utils] :reload)
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(tracula.utils/camelize-keys {"_ts" 2})
(tracula.utils/camelize-keys {"a_ts" 2})
(tracula.utils/camelize-keys {"_ts" 2})
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(tracula.calls/get-ticket 64169)
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(tracula.calls/get-ticket 64169)
(require '[tracula.utils] :reload)
(tracula.calls/get-ticket 64169)
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(require '[tracula.utils] :reload)
(tracula.utils/jsonify (tracula.calls/get-ticket 64169))
(defmacro component '(fn [] (this-as this)))
(defmacro component (fn [] (this-as this)))
(defmacro component (list '(fn [] (this-as this))))
(defmacro component (fn [] (this-as this)))
(defmacro component [] (fn [] (this-as this)))
(defmacro component [] '(fn [] (this-as this)))
(macroexpand component)
